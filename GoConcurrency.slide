Introduction to Go
Welcome to Gophers world


Deepak Gunjetti
Software Architect @ Andcloud
deepak@andcloud.io
@dgunjetti

* Goroutines

- Goroutines is the basic unit of organisation in a Go program.

- Every program has at least one goroutine: the main goroutine, which is automatically created and started when process begins.

* Goroutines...

- Goroutines is a function that is running concurrently (not necessarily in parallel!).

- 'go' keyword placed befor a function call starts a goroutine.

.code -edit src/01-Intro/hello01/main.go  /START OMIT/,/END OMIT/

* Goroutines...

- Anonymous function

.code -edit src/01-Intro/hello02/main.go  /START OMIT/,/END OMIT/

- we can assign function to variable and call the anonymous function

.code -edit src/01-Intro/hello03/main.go  /START OMIT/,/END OMIT/

* Goroutines...

- Goroutines are not OS threads, they are higher level abstration.

- Go has machanism known as M:N scheduler.

- M green threads are mapped onto N OS threads.

- scheduler distributes goroutines across the green threads.

- when goroutines get blocked, other goroutines are run.

* fork/join model

- 'go' statement forks a thread of execution.

- main goroutine and sayHello goroutine can be synchronized at a join point.

* fork/join model

.play -edit src/01-Intro/join/main.go  /START OMIT/,/END OMIT/

- deterministically block main goroutine until the goroutine hosting sayHello function terminates.

* Closures

- Goroutines execute within the same address space they are created in.

- They can directly modify variables in the enclosing lexical block.

* Closures..

.play -edit src/01-Intro/closure/main.go  /START OMIT/,/END OMIT/

* Closures..

- The Go runtime is observant enough to know that a reference to the "i" variable is still being held, and therefore will transfer the memory to the heap so that the goroutines can continue to access it.

- Go’s compiler nicely takes care of pinning variables in memory so that goroutines don’t accidentally access freed memory, which allows developers to focus on their problem space instead of memory management;

* Closures..

.play -edit src/01-Intro/closure02/main.go  /START OMIT/,/END OMIT/

* Closures..

- proper way to write this loop is to pass a copy of salutation into the closure so that by the time the goroutine is run, it will be operating on the data from its iteration of the loop.

* Lightweight

- A newly minted goroutine is given a few kilobytes

- run-time grows (and shrinks) the memory for storing the stack automatically, allowing many goroutines to live in a modest amount of memory. 

- CPU overhead averages about three cheap instructions per function call. It is practical to create hundreds of thousands of goroutines in the same address space.

- If goroutines were just threads, system resources would run out at a much smaller number.

- Context switching in software is comparatively much, much cheaper. Under a software-defined scheduler, the runtime can be more selective in what is persisted for retrieval, how it is persisted, and when the persisting need occur.

* Synchronization

- Since multiple goroutines can operate against the same address space, we still have to worry about synchronization.

- we can choose either to

    - synchronize access to the shared memory the goroutines access

    -  use CSP primitives to share memory by communication

* sync package

- The sync package contains the concurrency primitives for memory access synchronization.

* WaitGroup

- Wait for set of concurrent operations to complete.

    wg.Add(1)
    go func() {
        defer wg.Done()
    }()
    wg.Wait()

- wg.Add(1) - WaitGroup like a concurrent-safe counter: calls to Add increment the counter by the integer passed in. Add are done outside the goroutines they’re helping to track to avoid race condition.

- wg.Done() - decrement the counter by one.

- wg.Wait() - block until the counter is zero.

* Mutex and RWMutex

- Mutex guard critical sections of your program.

- critical section is an area of your program that requires exclusive access to a shared resource. 

- convention developers must follow to synchronize access to the memory to coordinating access to this memory by guarding access to it with a mutex.

* Mutex and RWMutex

.code -edit src/01-Intro/mutex/main.go  /START OMIT1/,/END OMIT1/

- It is a very common idiom to Unlock with defer statement, to ensure call always happens, even when panicing.

* Mutex and RWMutex..

.code -edit src/01-Intro/mutex/main.go  /START OMIT2/,/END OMIT2/

* sync.RWMutex

- Multiple number of readers can hold a reader lock so long as nothing else is holding a writer lock.

- Ex: producer that is less active than the numerous consumers

* sync.RWMutex..

.code -edit src/01-Intro/rwmutex/main.go  /START OMIT1/,/END OMIT1/

* sync.RWMutex..

.code -edit src/01-Intro/rwmutex/main.go  /START OMIT2/,/END OMIT2/

- sync.Locker interface two methods Lock and Unlock, which Mutex and RWMutex types satisfy.

* Cond

- A rendezvous point for goroutines waiting for or announcing the occurrence
of an event.

- It is a way for a goroutine to efficiently sleep until it was signaled to wake and check its condition.

- Ex: Say we have a queue of fixed length 2, and 10 items we want to push onto the queue. We want to enqueue items as soon as there is room, so we want to be notified as soon as there’s room in the queue. 


* Cond..

.code -edit src/01-Intro/cond/main.go  /START OMIT1/,/END OMIT1/

- The NewCond function takes in a type that satisfies the sync.Locker interface. This is what allows the Cond type to facilitate coordination with other goroutines in a concurrent-safe way.

* Cond..

.code -edit src/01-Intro/cond/main.go  /START OMIT2/,/END OMIT2/

- we lock the Locker for a condition. call to Wait automatically calls Unlock on the Locker when entered.

- We call Wait, which will suspend the main goroutine until a signal on the condition has been sent.

* Cond..

- Signal  notifying goroutines blocked on a Wait call that the condition has been triggered.

- Broadcast is other method in cond.

- Internally, the runtime maintains a FIFO list of goroutines waiting to be signaled; Signal finds the goroutine that’s been waiting the longest and notifies that, whereas Broadcast sends a signal to all goroutines that are waiting.

- Cond type is much more performant than utilizing channels.

* Cond, Broadcast

.code -edit src/01-Intro/cond02/main.go  /START OMIT1/,/END OMIT1/

* Cond, Broadcast

- subscribe is convenience function that will allow us to register functions to handle signals from a condition.

- Each handler is run on its own goroutine, and subscribe will not exit until that goroutine is confirmed to be running.

* Cond, Broadcast

.play -edit src/01-Intro/cond02/main.go  /START OMIT2/,/END OMIT2/

* Cond, Broadcast

- we set a handler for when the mouse button is clicked.

- Broadcast on the Clicked Cond to let all handlers know that the mouse button has been clicked 

- usage of Cond works best when constrained to a tight scope, or exposed to a broader scope through a type that encapsulates it.

* Once

.play -edit src/01-Intro/once/main.go  /START OMIT2/,/END OMIT2/

- sync.Once ensure that only one call to Do ever calls the function passed in—even on different goroutines. 

* Pool

- pool pattern is a way to create and make available a fixed number, or pool, of things for use. 

-  commonly used to constrain the creation of things that are expensive (e.g., database connections) so that only a fixed number of them are ever created,

* Pool..

- Get will first check whether there are any available instances within the pool to return to the caller, and if not, call its New member variable to create a new one.

- When finished, callers call Put to place the instance they were working with back in the pool for use by other processes. 

* Pool..

.play -edit src/01-Intro/pool/main.go  /START OMIT2/,/END OMIT2/

* Pool..

- Pool is useful where preallocated memory could avoid attempting to allocate a gigabyte of memory,

- warming a cache of pre-allocated objects for operations that must run as quickly as possible.

* Channels

- used to communicate information between goroutines.

- Like a river, a channel serves as a conduit for a stream of information; values may be passed along the channel, and then read out downstream. 

- creation of a channel 

    var dataStream chan interface{}
    dataStream = make(chan interface{})

- we instantiate the channel using built-in make function.

- chan interface{} variable, which means that we can place any kind of data onto it.

* uni directional channels

- Channels can also be declared to only support a unidirectional flow of data, either sending or receiving information.

- Used as function parameters.

- Read only channel

    var dataStream <-chan interface{}
    dataStream := make(<-chan interface{})

- Send only channel

    var dataStream chan<- interface{}
    dataStream := make(chan<- interface{})

* Typed channels 

-  type of channel constrain the type of data it could pass along.

    intStream := make(chan int)

* Send & Receive

.play -edit src/01-Intro/channels/main.go  /START OMIT/,/END OMIT/

* Channels are blocking

- goroutine that attempts to write to a channel that is full will wait until the channel has been emptied.

- any goroutine that attempts to read from a channel that is empty will wait until at least one item is placed on it. 

* Channels are blocking

.play -edit src/01-Intro/channels02/main.go  /START OMIT/,/END OMIT/

- When the anonymous goroutine exits, Go correctly detects that all goroutines are asleep, and reports a deadlock.

* <- operator 

- .play -edit src/01-Intro/channels03/main.go  /START OMIT/,/END OMIT/
 
- second return value is a way for a read operation to indicate whether the read off the channel was a value generated by a write elsewhere in the process, or a default value generated from a closed channel. 

* closed channel

- it’s very useful to be able to indicate that no more values will be sent over a channel. 

- This helps downstream processes know when to move on

* closed channel

- .play -edit src/01-Intro/channels04/main.go  /START OMIT/,/END OMIT/

- The second value returned, false, indicating that the value we received is the zero value for int, and not a value placed on the stream.

* ranging over a channel

- .play -edit src/01-Intro/channels05/main.go  /START OMIT/,/END OMIT/

- we ensure that the channel is closed before we exit the goroutine.

- Loop automatically break when a channel is closed.

- range does not return the second boolean value.

* Closing channel, unblocking multiple goroutines at once 

- Closing a channel is also one of the ways you can signal multiple goroutines simultaneously.

- If you have n goroutines waiting on a single channel, instead of writing n times to the channel to unblock each goroutine, you can simply close the channel. 

* unblocking multiple goroutines at once

- .play -edit src/01-Intro/channels06/main.go  /START OMIT/,/END OMIT/

* Buffered channels

- channels are given capacity when instantiated.

- Even if no reads are performed on the channel, a goroutine can still perform n writes, where n is the capacity of the buffered channel.

    var dataStream chan interface{}
    dataStream = make(chan interface{}, 4)

- goroutine that instantiates a channel controls whether it’s buffered. This suggests that the creation of a channel should probably be tightly coupled to goroutines that will be performing writes on it.

* Buffered channels

- buffered channels are an in-memory FIFO queue for concurrent processes to communicate over.

- Writes will block once buffers are full, remain blocked until room is made in the buffer by some goroutine performing a read. 

- read receives the first element that was placed on the channel.

- Reads block if there are no elements placed in buffered channel.

* Buffered channels

- .play -edit src/01-Intro/channels07/main.go  /START OMIT/,/END OMIT/

* Buffered channels

- goroutine making writes to a channel has knowledge of how many writes it will make, it can be useful to create a buffered channel whose capacity is the number of writes to be made.

*  Unbuffered channel 

    a := make(chan int)
    b := make(chan int, 0)

- channel with a capacity of 0.

- Writes block until there is reader.

- Read block until there is writer.

* Default value

- Default value for channels: nil

- reading/writing from a nil channel will block.

    var dataStream chan interface{}
    <-dataStream

    var dataStream chan interface{}
    dataStream <- struct{}{}

* Default value...

- closing nil channel will panic

    var dataStream chan interface{}
    close(dataStream)

- Ensure the channels are initialized first.

* ownership

- owner of channel is a goroutine that instantiates, writes, and closes a channel.

- channel owners have a write-access view into the channel (chan or chan<-), and channel utilizers only have a read-only view into the channel (<-chan).

- Ownership of channels avoids, 
    deadlocking by writing to a nil channel, 
    risk of panicing by closing a nil channel,
    risk of panicing by writing to a closed channel,
    risk of panicing by closing a channel more than once.

* ownership...

- .play -edit src/01-Intro/channels08/main.go  /START OMIT/,/END OMIT/

* ownership...

- Since we know we’ll produce six results, we create a buffered channel of six so that the goroutine can complete as quickly as possible.

- lifecycle of the resultStream channel is encapsulated within the chanOwner function, Channel owner performes write and close.

-  It’s very clear that the writes will not happen on a nil or closed channel, and that the close will always happen once.

- returned channel is declared as read-only channel. consumer function only has access to a read channel,

* select

- select helps components of program to coordinate with one another.

- Handle operations on multiple channels.

- select statements can help safely bring channels together with concepts like cancellations, timeouts, waiting, and default values.

* select 

- .play -edit src/01-Intro/select01/main.go  /START OMIT/,/END OMIT/

* select 

- select block encompasses a series of case statements

- select block aren’t tested sequentially, 

- all channel reads and writes are considered simultaneously3 to see if any of them are ready

- If none of the channels are ready, the entire select statement blocks. 

- when one the channels is ready, that operation will proceed, and its corresponding statements will execute. 

* select

- .play -edit src/01-Intro/select02/main.go  /START OMIT/,/END OMIT/

* select

- set of case statements, each has an equal chance of being selected as all the others.

* select.. timeout waiting on channel

- .play -edit src/01-Intro/select03/main.go  /START OMIT/,/END OMIT/

- This case statement will never become unblocked because we’re reading from a nil channel.

- The time.After function takes in a time.Duration argument and returns a channel that will send the current time after the duration you provide it. This offers a concise way to time out in select statements. 

* select.. No channels are ready 

- .play -edit src/01-Intro/select04/main.go  /START OMIT/,/END OMIT/

- Default allows you to exit a select block without blocking. 


* empty select

- Empty select statement will block forever.


